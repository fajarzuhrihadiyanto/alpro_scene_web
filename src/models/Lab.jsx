/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React from 'react'
import { useGLTF } from '@react-three/drei'
import { useThree } from '@react-three/fiber'
import gsap from 'gsap'

import Room from './Room'
import Clock from './Clock'
import Logo from './Logo'
import Balloons from './balloon/Balloons'
import BookShelfArea from './book shelf/BookShelfArea'
import WorkingArea from './components/WorkingArea'
import GeneralInformationArea from './GeneralInformationArea'
import FacilitiesArea from './FacilitiesArea'
import LecturerArea from './LecturerArea'
import SubjectArea from './SubjectArea'
import ResearchArea from './ResearchArea'
import CommunityServiceArea from './CommunityServiceArea'
import BookArea from './BookArea'
import useMainStore from '../store/useMainStore'
import { addVector3 } from '../utils'
import { ControlsContext } from '../context/ControlsContext'

const Lab = (props) => {
  const { nodes, materials } = useGLTF(process.env.REACT_APP_MODEL_URL)

  // get the state and setter from the store
  const focusTarget = useMainStore.useFocusTarget()
  const cameraPosition = useMainStore.useCameraPosition()
  const controlsTargetOffset = useMainStore.useControlsTargetOffset()

  const controlsTarget = addVector3(cameraPosition, controlsTargetOffset)

  const { controls } = React.useContext(ControlsContext)

  const { camera } = useThree()

  React.useEffect(() => {
    if (controls.current) {
      if (focusTarget !== null) {

        // animate camera to focus target
        gsap.to(controls.current.target, {duration: 1, ease: 'power4.inOut', x: controlsTarget[0], y: controlsTarget[1], z: controlsTarget[2]})
        gsap.to(camera.position, {duration: 1, ease: 'power4.inOut', x: cameraPosition[0], y: cameraPosition[1], z: cameraPosition[2]})
        
      } else {
        // enable rotate and set rotate speed back to default
        controls.current.enableRotate = true
        controls.current.rotateSpeed = -.5

        // animate back camera to original position 
        gsap.to(camera.position, {duration: 1, x: cameraPosition[0], y: cameraPosition[1], z: cameraPosition[2]})
        gsap.to(controls.current.target, {duration: 1, x: controlsTarget[0], y: controlsTarget[1], z: controlsTarget[2]})
      }
    }

  }, [focusTarget, cameraPosition, controlsTarget])
  return (
    <group {...props} dispose={null}>
      <Room nodes={nodes} materials={materials} />

      <GeneralInformationArea nodes={nodes} materials={materials} />
      <FacilitiesArea nodes={nodes} materials={materials} />
      <LecturerArea nodes={nodes} materials={materials} />
      <SubjectArea nodes={nodes} materials={materials} />
      <ResearchArea nodes={nodes} materials={materials} />
      <CommunityServiceArea nodes={nodes} materials={materials} />
      <BookArea nodes={nodes} materials={materials} />
      
      <WorkingArea nodes={nodes} materials={materials} position={[-1.05, 0.75, -.95]} rotation={[0, -Math.PI / 2, 0]} />

      <BookShelfArea nodes={nodes} materials={materials} />

      <Clock nodes={nodes} materials={materials} />
      <Logo nodes={nodes} materials={materials} />
      <Balloons nodes={nodes} materials={materials} />
    </group>
  )
}

useGLTF.preload(process.env.REACT_APP_MODEL_URL)

export default Lab